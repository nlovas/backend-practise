{"version":3,"file":"static/webpack/static\\development\\pages\\signup.js.623a49df416657586c85.hot-update.js","sources":["webpack:///./pages/signup.js"],"sourcesContent":["import Header from \"../components/Header\";\r\n\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport axios from \"axios\";\r\nimport * as React from \"react\";\r\n\r\nconst api = \"http://localhost:8080\";\r\n\r\nclass Signup extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  submitForm(fields, actions) {\r\n    //check to see if username and email already in use\r\n    this.checkUsernameAndEmail(fields.username, fields.email, actions).then(\r\n      (bothValid) => {\r\n        if (bothValid) {\r\n          console.log(\"both were valid. creating new account\");\r\n          this.createNewAccount({\r\n            username: fields.username,\r\n            password: fields.password,\r\n            email: fields.email,\r\n          });\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /*\r\n  Create a new account using the validated information from the form\r\n  Sends a post request to our backend to create a new user in the db\r\n  */\r\n  createNewAccount(data) {\r\n    axios({\r\n      method: \"post\",\r\n      url: \"http://localhost:8080/create-user\",\r\n      data: {\r\n        username: data.username,\r\n        password: data.password,\r\n        email: data.email,\r\n        admin: \"false\",\r\n      },\r\n    }).then(\r\n      (response) => {\r\n        console.log(response);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  /*\r\n  Check existence of both username and email and only return true if both are not already in use\r\n  NOTE: There is a known bug with Yup's .test calling every time any field is blurred\r\n  This would mean a TON of unneeded calls to the api\r\n  Since there were no workarounds that worked for me, I changed mine to\r\n  check on submit instead of onBlur :'(\r\n  Follow the issue here https://github.com/jaredpalmer/formik/issues/512            \r\n  */\r\n  checkUsernameAndEmail(username, email, actions) {\r\n    return new Promise((resolve, reject) => {\r\n      var p1 = this.checkUsernameExistence(username);\r\n      var p2 = this.checkEmailAvailable(email);\r\n      Promise.all([p1, p2]).then((values) => {\r\n        //both should have returned true in order to create account\r\n        console.log(values);\r\n        if (values[0] === false) {\r\n          //username is already in use, show an error to the user\r\n          actions.setFieldError(\"username\", \"This username is already in use\");\r\n          resolve(false);\r\n        }\r\n        if (values[1] === false) {\r\n          //email is already in use, show an error to the user\r\n          actions.setFieldError(\"email\", \"This email is already in use\");\r\n          resolve(false);\r\n        }\r\n        if (values[0] === true && values[1] === true) {\r\n          //both username and email are not taken\r\n          resolve(true);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /*\r\n  Calls api to see if the username has already been registered\r\n  */\r\n  checkUsernameExistence(username) {\r\n    console.log(\"formval is \", username);\r\n    return new Promise((resolve, reject) => {\r\n      /*\r\n  Async Validation using Yup, Formik, and React https://stackoverflow.com/a/57882753\r\n  Answered by Stack Overflow user 이석규 (https://stackoverflow.com/users/12051163/%ec%9d%b4%ec%84%9d%ea%b7%9c)\r\n  */\r\n      axios({\r\n        method: \"get\",\r\n        url: \"http://localhost:8080/user/\" + username,\r\n        params: {\r\n          username: username,\r\n        },\r\n      }).then(\r\n        (response) => {\r\n          console.log(response);\r\n          if (response.data === \"true\") {\r\n            //this username has been taken\r\n            resolve(false);\r\n          } else {\r\n            resolve(true);\r\n          }\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  /*\r\n  calls api to see if the email submitted is already registered\r\n  */\r\n  checkEmailAvailable(email) {\r\n    return new Promise((resolve, reject) => {\r\n      axios({\r\n        method: \"get\",\r\n        url: \"http://localhost:8080/\" + email,\r\n        params: {\r\n          email: email,\r\n        },\r\n      }).then(\r\n        (response) => {\r\n          console.log(response);\r\n          if (response.data === \"true\") {\r\n            //this email is already in use\r\n            resolve(false);\r\n          } else {\r\n            resolve(true);\r\n          }\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div>\r\n          <div>Sign up</div>\r\n          <Formik\r\n            initialValues={{\r\n              username: \"\",\r\n              password: \"\",\r\n              confirmPassword: \"\",\r\n              email: \"\",\r\n            }}\r\n            validationSchema={Yup.object().shape({\r\n              username: Yup.string()\r\n                .required(\"Required\")\r\n                .min(3, \"Username must be at least 3 characters long\")\r\n                .max(20, \"Username is too long\")\r\n                .matches(\r\n                  /^[A-Za-z0-9\\-\\_.]*$/,\r\n                  \"Username can only use letters, numbers, or special characters(-_.)\"\r\n                ),\r\n              password: Yup.string()\r\n                .required(\"Required\")\r\n                .min(6, \"Password must be at least 6 characters long\")\r\n                .max(20, \"Password is too long\")\r\n                .matches(\r\n                  /(?=(.*[0-9]))(?=.*[\\!@#$%^&*\\-_.])(?=.*[a-z])(?=(.*[A-Z]))(?=(.*))/,\r\n                  \"Password must contain: one or more lowercase letters, uppercase letters, a number, and a symbol(!@#$%^&*-_.)\"\r\n                ),\r\n              confirmPassword: Yup.string()\r\n                .required(\"Required\")\r\n                .oneOf([Yup.ref(\"password\"), null], \"Passwords do not match\"),\r\n              email: Yup.string()\r\n                .required(\"Required\")\r\n                .email(\"Must be a valid email\"),\r\n            })}\r\n            onSubmit={async (fields, actions) => {\r\n              this.submitForm(fields, actions);\r\n            }}\r\n          >\r\n            {(props) => (\r\n              <Form>\r\n                <label htmlFor=\"username\">\r\n                  First, choose a unique username\r\n                </label>\r\n                <Field\r\n                  name=\"username\"\r\n                  type=\"text\"\r\n                  placeholder=\"Enter a username\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (props.errors.username && props.touched.username\r\n                      ? \" is-invalid\"\r\n                      : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"username\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n                <label htmlFor=\"password\">\r\n                  Enter a password (must contain min. 6 characters)\r\n                </label>\r\n                <Field\r\n                  name=\"password\"\r\n                  type=\"text\"\r\n                  placeholder=\"Create a password\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (props.errors.password && props.touched.password\r\n                      ? \" is-invalid\"\r\n                      : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"password\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n\r\n                <label htmlFor=\"confirmPassword\">\r\n                  Please confirm your password\r\n                </label>\r\n                <Field\r\n                  name=\"confirmPassword\"\r\n                  type=\"text\"\r\n                  placeholder=\"Confirm password\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (props.errors.confirmPassword &&\r\n                    props.touched.confirmPassword\r\n                      ? \" is-invalid\"\r\n                      : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"confirmPassword\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n                <label htmlFor=\"email\">Enter your email</label>\r\n                <Field\r\n                  name=\"email\"\r\n                  type=\"text\"\r\n                  placeholder=\"Enter an email\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (props.errors.email && props.touched.email\r\n                      ? \" is-invalid\"\r\n                      : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"email\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n                <button type=\"submit\">Register</button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signup;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AAEA;;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAWA;AACA;AAEA;AACA;AAEA;AAEA;;;;;;;;;;;AAQA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAGA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AADA;AAHA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;AAEA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAQA;AAQA;AAGA;AApBA;AAwBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/BA;AAmCA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AAHA;AAKA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AAHA;AAMA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AAaA;AACA;AACA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AAHA;AAKA;AAAA;AA9EA;AAqFA;;;;AAzQA;AACA;AA2QA;;;;A","sourceRoot":""}