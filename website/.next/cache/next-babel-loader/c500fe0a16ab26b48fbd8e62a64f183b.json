{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\backend-practise\\\\frontend\\\\pages\\\\signup.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Header from \"../components/Header\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nvar api = \"http://localhost:8080\";\n\nvar Signup = /*#__PURE__*/function (_React$Component) {\n  _inherits(Signup, _React$Component);\n\n  var _super = _createSuper(Signup);\n\n  function Signup(props) {\n    _classCallCheck(this, Signup);\n\n    return _super.call(this, props);\n  }\n  /*  onInputBlur(event, field) {\r\n    console.log(\"username had an input blur\", event, field);\r\n    // handleBlur(event);\r\n    //validateField(field);\r\n  }\r\n  */\n\n  /*\r\n  Create a new account using the validated information from the form\r\n  Sends a post request to our backend to create a new user in the db\r\n  */\n\n\n  _createClass(Signup, [{\n    key: \"createNewAccount\",\n    value: function createNewAccount(data) {\n      axios({\n        method: \"post\",\n        url: \"http://localhost:8080/create-user\",\n        data: {\n          username: data.username,\n          password: data.password,\n          email: data.email,\n          admin: \"false\"\n        }\n      }).then(function (response) {\n        console.log(response);\n      }, function (error) {\n        console.log(error);\n      });\n    }\n    /*\r\n    Check existence of both username and email and only return true if both are not already in use\r\n    */\n\n  }, {\n    key: \"checkUsernameAndEmail\",\n    value: function checkUsernameAndEmail(username, email, actions) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var p1 = _this.checkUsernameExistence(username);\n\n        var p2 = _this.checkEmailAvailable(email);\n\n        Promise.all([p1, p2]).then(function (values) {\n          //both should have returned true in order to create account\n          console.log(values);\n          resolve(false);\n        }); //check if username is already in use\n\n        /* this.checkUsernameExistence(username)\r\n        .then((isAvailable)=>{\r\n        if (isAvailable) {\r\n        \r\n        } else{\r\n          actions.setFieldError(\r\n            \"username\",\r\n            \"This username is already in use\"\r\n          );\r\n        }\r\n        });\r\n        //check to see if email is already in use\r\n        this.checkEmailAvailable(fields.email)\r\n        .then((isAvailable) => {\r\n        if (isAvailable) {\r\n          \r\n        } else {\r\n          actions.setFieldError(\r\n            \"email\",\r\n            \"This email is already in use\"\r\n          );\r\n        }\r\n        });*/\n      });\n    }\n    /*\r\n    Calls api to see if the username has already been registered\r\n    */\n\n  }, {\n    key: \"checkUsernameExistence\",\n    value: function checkUsernameExistence(username) {\n      console.log(\"formval is \", username);\n      return new Promise(function (resolve, reject) {\n        /*\r\n        Async Validation using Yup, Formik, and React https://stackoverflow.com/a/57882753\r\n        Answered by Stack Overflow user 이석규 (https://stackoverflow.com/users/12051163/%ec%9d%b4%ec%84%9d%ea%b7%9c)\r\n        */\n        axios({\n          method: \"get\",\n          url: \"http://localhost:8080/user/\" + username,\n          params: {\n            username: username\n          }\n        }).then(function (response) {\n          console.log(response);\n\n          if (response.data === \"true\") {\n            //this username has been taken\n            resolve(false);\n          } else {\n            resolve(true);\n          }\n        }, function (error) {\n          console.log(error);\n        });\n      });\n    }\n    /*\r\n    calls api to see if the email submitted is already registered\r\n    */\n\n  }, {\n    key: \"checkEmailAvailable\",\n    value: function checkEmailAvailable(email) {\n      return new Promise(function (resolve, reject) {\n        axios({\n          method: \"get\",\n          url: \"http://localhost:8080/\" + email,\n          params: {\n            email: email\n          }\n        }).then(function (response) {\n          console.log(response);\n\n          if (response.data === \"true\") {\n            //this email is already in use\n            resolve(false);\n          } else {\n            resolve(true);\n          }\n        }, function (error) {\n          console.log(error);\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 7\n        }\n      }, __jsx(Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }\n      }), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }\n      }, \"Sign up\"), __jsx(Formik, {\n        initialValues: {\n          username: \"\",\n          password: \"\",\n          confirmPassword: \"\",\n          email: \"\"\n        },\n        validationSchema: Yup.object().shape({\n          username: Yup.string().required(\"Required\").min(3, \"Username must be at least 3 characters long\").max(20, \"Username is too long\").matches(/^[A-Za-z0-9\\-\\_.]*$/, \"Username can only use letters, numbers, or special characters(-_.)\"),\n          //check to see if this username already exists\n\n          /*\r\n            NOTE: There is a known bug with Yup's .test calling every time a field is blurred\r\n            This means a TON of unneeded calls to the api\r\n            Follow the issue here https://github.com/jaredpalmer/formik/issues/512\r\n            going to try a workaround\r\n            */\n\n          /* .test(\r\n              \"checkUsernameExistence\",\r\n              \"This username is not available\",\r\n              async (value) => {\r\n                return this.checkUsernameExistence(value);\r\n              }\r\n            ),*/\n          password: Yup.string().required(\"Required\").min(6, \"Password must be at least 6 characters long\").max(20, \"Password is too long\").matches(/(?=(.*[0-9]))(?=.*[\\!@#$%^&*\\-_.])(?=.*[a-z])(?=(.*[A-Z]))(?=(.*))/, \"Password must contain: one or more lowercase letters, uppercase letters, a number, and a symbol(!@#$%^&*-_.)\")\n          /*\r\n          (?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*\\-\\_])\r\n          (?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*\\-\\_])\\w+ from regexer\r\n          password\r\n          PASSWORD\r\n          123456\r\n          @@!!!@@@--@!\r\n          pass!!!!!!\r\n          password1234\r\n          PASS---WORD\r\n          123456***\r\n          PASSWORD12345\r\n          passWORD\r\n          PASSword12\r\n          passWORD!!\r\n          PASSW123RD!\r\n          password123!\r\n          should pass:\r\n          passWORD123!\r\n          pASSw@rd222\r\n            Passwords to test:\r\n          password\r\n          PASSWORD\r\n          123456\r\n          @@!!!@@@--@!\r\n            pass!!!!!!\r\n          password1234\r\n          PASS---WORD\r\n          123456***\r\n          PASSWORD12345\r\n          passWORD\r\n            PASSword12\r\n          passWORD!!\r\n          PASSW123RD!\r\n          password123!\r\n            should pass:\r\n          passWORD123!\r\n          https://regexr.com/\r\n          https://stackoverflow.com/questions/5887678/alphanumeric-dash-and-underscore-but-no-spaces-regular-expression-check-javascr\r\n          https://www.thepolyglotdeveloper.com/2015/05/use-regex-to-test-password-strength-in-javascript/\r\n          */\n          ,\n          confirmPassword: Yup.string().required(\"Required\").oneOf([Yup.ref(\"password\"), null], \"Passwords do not match\"),\n          email: Yup.string().required(\"Required\").email(\"Must be a valid email\")\n        }),\n        onSubmit: function onSubmit(fields, actions) {\n          //check to see if username and email already in use\n          _this2.checkUsernameAndEmail(fields.username, fields.email, actions).then(function (bothValid) {\n            if (bothValid) {\n              console.log(\"both were valid. creating new account\");\n\n              _this2.createNewAccount({\n                username: fields.username,\n                password: fields.password,\n                email: fields.email\n              });\n            }\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }\n      }, function (props) {\n        return __jsx(Form, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }\n        }, __jsx(\"label\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 17\n          }\n        }, \"First, choose a unique username\"), __jsx(Field, {\n          name: \"username\",\n          type: \"text\",\n          className: \"form-control\" + (props.errors.username && props.touched.username ? \" is-invalid\" : \"\"),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 17\n          }\n        }), __jsx(ErrorMessage, {\n          name: \"username\",\n          component: \"div\",\n          className: \"invalid-feedback\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 17\n          }\n        }), __jsx(\"label\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 17\n          }\n        }, \"Enter a password (must contain min. 6 characters)\"), __jsx(Field, {\n          name: \"password\",\n          type: \"text\",\n          className: \"form-control\" + (props.errors.password && props.touched.password ? \" is-invalid\" : \"\"),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 17\n          }\n        }), __jsx(ErrorMessage, {\n          name: \"password\",\n          component: \"div\",\n          className: \"invalid-feedback\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 17\n          }\n        }), __jsx(\"label\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 17\n          }\n        }, \"Please confirm your password\"), __jsx(Field, {\n          name: \"confirmPassword\",\n          type: \"text\",\n          className: \"form-control\" + (props.errors.confirmPassword && props.touched.confirmPassword ? \" is-invalid\" : \"\"),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 17\n          }\n        }), __jsx(ErrorMessage, {\n          name: \"confirmPassword\",\n          component: \"div\",\n          className: \"invalid-feedback\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 17\n          }\n        }), __jsx(\"label\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 17\n          }\n        }, \"Enter your email\"), __jsx(Field, {\n          name: \"email\",\n          type: \"text\",\n          className: \"form-control\" + (props.errors.email && props.touched.email ? \" is-invalid\" : \"\"),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 17\n          }\n        }), __jsx(ErrorMessage, {\n          name: \"email\",\n          component: \"div\",\n          className: \"invalid-feedback\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 17\n          }\n        }), __jsx(\"button\", {\n          type: \"submit\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 17\n          }\n        }, \"Register\"));\n      })));\n    }\n  }]);\n\n  return Signup;\n}(React.Component);\n\nexport default Signup;","map":{"version":3,"sources":["C:/Users/User/Documents/backend-practise/frontend/pages/signup.js"],"names":["Header","Formik","Field","Form","ErrorMessage","Yup","axios","api","Signup","props","data","method","url","username","password","email","admin","then","response","console","log","error","actions","Promise","resolve","reject","p1","checkUsernameExistence","p2","checkEmailAvailable","all","values","params","confirmPassword","object","shape","string","required","min","max","matches","oneOf","ref","fields","checkUsernameAndEmail","bothValid","createNewAccount","errors","touched","React","Component"],"mappings":"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","sourcesContent":["import Header from \"../components/Header\";\r\n\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport axios from \"axios\";\r\n\r\nconst api = \"http://localhost:8080\";\r\n\r\nclass Signup extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  /*  onInputBlur(event, field) {\r\n    console.log(\"username had an input blur\", event, field);\r\n    // handleBlur(event);\r\n    //validateField(field);\r\n  }\r\n  */\r\n\r\n  /*\r\n  Create a new account using the validated information from the form\r\n  Sends a post request to our backend to create a new user in the db\r\n  */\r\n  createNewAccount(data) {\r\n    axios({\r\n      method: \"post\",\r\n      url: \"http://localhost:8080/create-user\",\r\n      data: {\r\n        username: data.username,\r\n        password: data.password,\r\n        email: data.email,\r\n        admin: \"false\",\r\n      },\r\n    }).then(\r\n      (response) => {\r\n        console.log(response);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n  /*\r\nCheck existence of both username and email and only return true if both are not already in use\r\n*/\r\n  checkUsernameAndEmail(username, email, actions) {\r\n    return new Promise((resolve, reject) => {\r\n      var p1 = this.checkUsernameExistence(username);\r\n      var p2 = this.checkEmailAvailable(email);\r\n      Promise.all([p1, p2]).then((values) => {\r\n        //both should have returned true in order to create account\r\n        console.log(values);\r\n        resolve(false);\r\n      });\r\n\r\n      //check if username is already in use\r\n      /* this.checkUsernameExistence(username)\r\n    .then((isAvailable)=>{\r\n      if (isAvailable) {\r\n      \r\n      } else{\r\n        actions.setFieldError(\r\n          \"username\",\r\n          \"This username is already in use\"\r\n        );\r\n      }\r\n    });\r\n    //check to see if email is already in use\r\n    this.checkEmailAvailable(fields.email)\r\n    .then((isAvailable) => {\r\n      if (isAvailable) {\r\n        \r\n      } else {\r\n        actions.setFieldError(\r\n          \"email\",\r\n          \"This email is already in use\"\r\n        );\r\n      }\r\n    });*/\r\n    });\r\n  }\r\n\r\n  /*\r\n  Calls api to see if the username has already been registered\r\n  */\r\n  checkUsernameExistence(username) {\r\n    console.log(\"formval is \", username);\r\n    return new Promise((resolve, reject) => {\r\n      /*\r\nAsync Validation using Yup, Formik, and React https://stackoverflow.com/a/57882753\r\nAnswered by Stack Overflow user 이석규 (https://stackoverflow.com/users/12051163/%ec%9d%b4%ec%84%9d%ea%b7%9c)\r\n*/\r\n      axios({\r\n        method: \"get\",\r\n        url: \"http://localhost:8080/user/\" + username,\r\n        params: {\r\n          username: username,\r\n        },\r\n      }).then(\r\n        (response) => {\r\n          console.log(response);\r\n          if (response.data === \"true\") {\r\n            //this username has been taken\r\n            resolve(false);\r\n          } else {\r\n            resolve(true);\r\n          }\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  /*\r\n  calls api to see if the email submitted is already registered\r\n  */\r\n  checkEmailAvailable(email) {\r\n    return new Promise((resolve, reject) => {\r\n      axios({\r\n        method: \"get\",\r\n        url: \"http://localhost:8080/\" + email,\r\n        params: {\r\n          email: email,\r\n        },\r\n      }).then(\r\n        (response) => {\r\n          console.log(response);\r\n          if (response.data === \"true\") {\r\n            //this email is already in use\r\n            resolve(false);\r\n          } else {\r\n            resolve(true);\r\n          }\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div>\r\n          <div>Sign up</div>\r\n          <Formik\r\n            initialValues={{\r\n              username: \"\",\r\n              password: \"\",\r\n              confirmPassword: \"\",\r\n              email: \"\",\r\n            }}\r\n            validationSchema={Yup.object().shape({\r\n              username: Yup.string()\r\n                .required(\"Required\")\r\n                .min(3, \"Username must be at least 3 characters long\")\r\n                .max(20, \"Username is too long\")\r\n                .matches(\r\n                  /^[A-Za-z0-9\\-\\_.]*$/,\r\n                  \"Username can only use letters, numbers, or special characters(-_.)\"\r\n                ),\r\n              //check to see if this username already exists\r\n              /*\r\n                NOTE: There is a known bug with Yup's .test calling every time a field is blurred\r\n                This means a TON of unneeded calls to the api\r\n                Follow the issue here https://github.com/jaredpalmer/formik/issues/512\r\n                going to try a workaround\r\n                */\r\n              /* .test(\r\n                  \"checkUsernameExistence\",\r\n                  \"This username is not available\",\r\n                  async (value) => {\r\n                    return this.checkUsernameExistence(value);\r\n                  }\r\n                ),*/\r\n              password: Yup.string()\r\n                .required(\"Required\")\r\n                .min(6, \"Password must be at least 6 characters long\")\r\n                .max(20, \"Password is too long\")\r\n                .matches(\r\n                  /(?=(.*[0-9]))(?=.*[\\!@#$%^&*\\-_.])(?=.*[a-z])(?=(.*[A-Z]))(?=(.*))/,\r\n                  \"Password must contain: one or more lowercase letters, uppercase letters, a number, and a symbol(!@#$%^&*-_.)\"\r\n                ) /*\r\n(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*\\-\\_])\r\n(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*\\-\\_])\\w+ from regexer\r\n\r\npassword\r\nPASSWORD\r\n123456\r\n@@!!!@@@--@!\r\npass!!!!!!\r\npassword1234\r\nPASS---WORD\r\n123456***\r\nPASSWORD12345\r\npassWORD\r\nPASSword12\r\npassWORD!!\r\nPASSW123RD!\r\npassword123!\r\nshould pass:\r\npassWORD123!\r\npASSw@rd222\r\n\r\n                  Passwords to test:\r\n                  password\r\n                  PASSWORD\r\n                  123456\r\n                  @@!!!@@@--@!\r\n\r\n                  pass!!!!!!\r\n                  password1234\r\n                  PASS---WORD\r\n                  123456***\r\n                  PASSWORD12345\r\n                  passWORD\r\n\r\n                  PASSword12\r\n                  passWORD!!\r\n                  PASSW123RD!\r\n                  password123!\r\n\r\n                  should pass:\r\n                  passWORD123!\r\n\r\n                https://regexr.com/\r\n                https://stackoverflow.com/questions/5887678/alphanumeric-dash-and-underscore-but-no-spaces-regular-expression-check-javascr\r\n                https://www.thepolyglotdeveloper.com/2015/05/use-regex-to-test-password-strength-in-javascript/\r\n                */,\r\n              confirmPassword: Yup.string()\r\n                .required(\"Required\")\r\n                .oneOf([Yup.ref(\"password\"), null], \"Passwords do not match\"),\r\n              email: Yup.string()\r\n                .required(\"Required\")\r\n                .email(\"Must be a valid email\"),\r\n            })}\r\n            onSubmit={(fields, actions) => {\r\n              //check to see if username and email already in use\r\n              this.checkUsernameAndEmail(\r\n                fields.username,\r\n                fields.email,\r\n                actions\r\n              ).then((bothValid) => {\r\n                if (bothValid) {\r\n                  console.log(\"both were valid. creating new account\");\r\n                  this.createNewAccount({\r\n                    username: fields.username,\r\n                    password: fields.password,\r\n                    email: fields.email,\r\n                  });\r\n                }\r\n              });\r\n            }}\r\n          >\r\n            {(props) => (\r\n              <Form>\r\n                <label>First, choose a unique username</label>\r\n                <Field\r\n                  name=\"username\"\r\n                  type=\"text\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (props.errors.username && props.touched.username\r\n                      ? \" is-invalid\"\r\n                      : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"username\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n                <label>Enter a password (must contain min. 6 characters)</label>\r\n                <Field\r\n                  name=\"password\"\r\n                  type=\"text\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (props.errors.password && props.touched.password\r\n                      ? \" is-invalid\"\r\n                      : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"password\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n\r\n                <label>Please confirm your password</label>\r\n                <Field\r\n                  name=\"confirmPassword\"\r\n                  type=\"text\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (props.errors.confirmPassword &&\r\n                    props.touched.confirmPassword\r\n                      ? \" is-invalid\"\r\n                      : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"confirmPassword\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n                <label>Enter your email</label>\r\n                <Field\r\n                  name=\"email\"\r\n                  type=\"text\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (props.errors.email && props.touched.email\r\n                      ? \" is-invalid\"\r\n                      : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"email\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n                <button type=\"submit\">Register</button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signup;\r\n"]},"metadata":{},"sourceType":"module"}