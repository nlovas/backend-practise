{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\backend-practise\\\\frontend\\\\pages\\\\signup.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Header from \"../components/Header\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nconst api = \"http://localhost:8080\";\n\nclass Signup extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  /*\r\n  Create a new account using the validated information from the form\r\n  Sends a post request to our backend to create a new user in the db\r\n  */\n\n\n  createNewAccount(data) {\n    axios({\n      method: \"post\",\n      url: \"http://localhost:8080/create-user\",\n      data: {\n        username: data.username,\n        password: data.password,\n        email: data.email,\n        admin: \"false\"\n      }\n    }).then(response => {\n      console.log(response);\n    }, error => {\n      console.log(error);\n    });\n  }\n  /*\r\n  Calls api to see if the username has already been registered\r\n  */\n\n\n  checkUsernameExistence(username) {\n    console.log(\"formval is \", username);\n    return new Promise((resolve, reject) => {\n      axios({\n        method: \"get\",\n        url: \"http://localhost:8080/user/\" + username,\n        params: {\n          username: username //,\n          //email: formVal.email,\n\n        }\n      }).then(response => {\n        console.log(response);\n\n        if (response.data === true) {\n          //this username has been taken\n          resolve(false);\n        } else {\n          resolve(true);\n        }\n      }, error => {\n        console.log(error);\n      });\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, __jsx(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, \"Sign up\"), __jsx(Formik, {\n      initialValues: {\n        username: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        email: \"\"\n      },\n      validationSchema: Yup.object().shape({\n        username: Yup.string().required(\"Required\").min(3, \"Username must be at least 3 characters long\").max(20, \"Username is too long\").matches(/^[A-Za-z0-9\\-\\_.]*$/, \"Username can only use letters, numbers, or special characters(-_.)\") //check to see if this username already exists\n        .test(\"checkUsernameExistence\", \"This username is not available\", async value => {\n          window.setTimeout(() => {\n            const errors = {};\n            errors.username = \"nce try\";\n            return errors;\n          }, 2000); //this.checkUsernameExistence(this.props.values.username)\n\n          /*.then(onfulfilled => return true;,\r\n            onrejected => return false;\r\n          });*/\n          // return new Promise((resolve, reject) => {});\n        }),\n        password: Yup.string().required(\"Required\").min(6, \"Password must be at least 6 characters long\").max(20, \"Password is too long\").matches(/(?=(.*[0-9]))(?=.*[\\!@#$%^&*\\-_.])(?=.*[a-z])(?=(.*[A-Z]))(?=(.*))/, \"Password must contain: one or more lowercase letters, uppercase letters, a number, and a symbol(!@#$%^&*-_.)\")\n        /*\r\n        (?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*\\-\\_])\r\n        (?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*\\-\\_])\\w+ from regexer\r\n        password\r\n        PASSWORD\r\n        123456\r\n        @@!!!@@@--@!\r\n        pass!!!!!!\r\n        password1234\r\n        PASS---WORD\r\n        123456***\r\n        PASSWORD12345\r\n        passWORD\r\n        PASSword12\r\n        passWORD!!\r\n        PASSW123RD!\r\n        password123!\r\n        should pass:\r\n        passWORD123!\r\n        pASSw@rd222\r\n          Passwords to test:\r\n        password\r\n        PASSWORD\r\n        123456\r\n        @@!!!@@@--@!\r\n          pass!!!!!!\r\n        password1234\r\n        PASS---WORD\r\n        123456***\r\n        PASSWORD12345\r\n        passWORD\r\n          PASSword12\r\n        passWORD!!\r\n        PASSW123RD!\r\n        password123!\r\n          should pass:\r\n        passWORD123!\r\n        https://regexr.com/\r\n        https://stackoverflow.com/questions/5887678/alphanumeric-dash-and-underscore-but-no-spaces-regular-expression-check-javascr\r\n        https://www.thepolyglotdeveloper.com/2015/05/use-regex-to-test-password-strength-in-javascript/\r\n        */\n        ,\n        confirmPassword: Yup.string().required(\"Required\").oneOf([Yup.ref(\"password\"), null], \"Passwords do not match\"),\n        email: Yup.string().required(\"Required\").email(\"Must be a valid email\")\n      }),\n      onSubmit: fields => {\n        //  alert(\"SUCCESS!! :-)\\n\\n\" + JSON.stringify(fields, null, 4));\n        this.createNewAccount({\n          username: fields.username,\n          password: fields.password,\n          email: fields.email\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, props => __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 15\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }\n    }, \"First, choose a unique username\"), __jsx(Field, {\n      name: \"username\",\n      type: \"text\",\n      className: \"form-control\" + (props.errors.username && props.touched.username ? \" is-invalid\" : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }\n    }), __jsx(ErrorMessage, {\n      name: \"username\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }\n    }), __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }\n    }, \"Enter a password (must contain min. 6 characters)\"), __jsx(Field, {\n      name: \"password\",\n      type: \"text\",\n      className: \"form-control\" + (props.errors.password && props.touched.password ? \" is-invalid\" : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }\n    }), __jsx(ErrorMessage, {\n      name: \"password\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }\n    }), __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }\n    }, \"Please confirm your password\"), __jsx(Field, {\n      name: \"confirmPassword\",\n      type: \"text\",\n      className: \"form-control\" + (props.errors.confirmPassword && props.touched.confirmPassword ? \" is-invalid\" : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }\n    }), __jsx(ErrorMessage, {\n      name: \"confirmPassword\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }\n    }), __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }\n    }, \"Enter your email\"), __jsx(Field, {\n      name: \"email\",\n      type: \"text\",\n      className: \"form-control\" + (props.errors.email && props.touched.email ? \" is-invalid\" : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }\n    }), __jsx(ErrorMessage, {\n      name: \"email\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }\n    }, \"Register\")))));\n  }\n\n}\n\nexport default Signup;","map":{"version":3,"sources":["C:/Users/User/Documents/backend-practise/frontend/pages/signup.js"],"names":["Header","Formik","Field","Form","ErrorMessage","Yup","axios","api","Signup","React","Component","constructor","props","createNewAccount","data","method","url","username","password","email","admin","then","response","console","log","error","checkUsernameExistence","Promise","resolve","reject","params","render","confirmPassword","object","shape","string","required","min","max","matches","test","value","window","setTimeout","errors","oneOf","ref","fields","touched"],"mappings":"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","sourcesContent":["import Header from \"../components/Header\";\r\n\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport axios from \"axios\";\r\n\r\nconst api = \"http://localhost:8080\";\r\n\r\nclass Signup extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  /*\r\n  Create a new account using the validated information from the form\r\n  Sends a post request to our backend to create a new user in the db\r\n  */\r\n  createNewAccount(data) {\r\n    axios({\r\n      method: \"post\",\r\n      url: \"http://localhost:8080/create-user\",\r\n      data: {\r\n        username: data.username,\r\n        password: data.password,\r\n        email: data.email,\r\n        admin: \"false\",\r\n      },\r\n    }).then(\r\n      (response) => {\r\n        console.log(response);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  /*\r\n  Calls api to see if the username has already been registered\r\n  */\r\n  checkUsernameExistence(username) {\r\n    console.log(\"formval is \", username);\r\n    return new Promise((resolve, reject) => {\r\n      axios({\r\n        method: \"get\",\r\n        url: \"http://localhost:8080/user/\" + username,\r\n        params: {\r\n          username: username, //,\r\n          //email: formVal.email,\r\n        },\r\n      }).then(\r\n        (response) => {\r\n          console.log(response);\r\n          if (response.data === true) {\r\n            //this username has been taken\r\n            resolve(false);\r\n          } else {\r\n            resolve(true);\r\n          }\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div>\r\n          <div>Sign up</div>\r\n          <Formik\r\n            initialValues={{\r\n              username: \"\",\r\n              password: \"\",\r\n              confirmPassword: \"\",\r\n              email: \"\",\r\n            }}\r\n            validationSchema={Yup.object().shape({\r\n              username: Yup.string()\r\n                .required(\"Required\")\r\n                .min(3, \"Username must be at least 3 characters long\")\r\n                .max(20, \"Username is too long\")\r\n                .matches(\r\n                  /^[A-Za-z0-9\\-\\_.]*$/,\r\n                  \"Username can only use letters, numbers, or special characters(-_.)\"\r\n                )\r\n                //check to see if this username already exists\r\n                .test(\r\n                  \"checkUsernameExistence\",\r\n                  \"This username is not available\",\r\n                  async (value) => {\r\n                    window.setTimeout(() => {\r\n                      const errors = {};\r\n                      errors.username = \"nce try\";\r\n                      return errors;\r\n                    }, 2000);\r\n                    //this.checkUsernameExistence(this.props.values.username)\r\n                    /*.then(onfulfilled => return true;,\r\n                      onrejected => return false;\r\n                    });*/\r\n                    // return new Promise((resolve, reject) => {});\r\n                  }\r\n                ),\r\n              password: Yup.string()\r\n                .required(\"Required\")\r\n                .min(6, \"Password must be at least 6 characters long\")\r\n                .max(20, \"Password is too long\")\r\n                .matches(\r\n                  /(?=(.*[0-9]))(?=.*[\\!@#$%^&*\\-_.])(?=.*[a-z])(?=(.*[A-Z]))(?=(.*))/,\r\n                  \"Password must contain: one or more lowercase letters, uppercase letters, a number, and a symbol(!@#$%^&*-_.)\"\r\n                ) /*\r\n(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*\\-\\_])\r\n(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*\\-\\_])\\w+ from regexer\r\n\r\npassword\r\nPASSWORD\r\n123456\r\n@@!!!@@@--@!\r\npass!!!!!!\r\npassword1234\r\nPASS---WORD\r\n123456***\r\nPASSWORD12345\r\npassWORD\r\nPASSword12\r\npassWORD!!\r\nPASSW123RD!\r\npassword123!\r\nshould pass:\r\npassWORD123!\r\npASSw@rd222\r\n\r\n                  Passwords to test:\r\n                  password\r\n                  PASSWORD\r\n                  123456\r\n                  @@!!!@@@--@!\r\n\r\n                  pass!!!!!!\r\n                  password1234\r\n                  PASS---WORD\r\n                  123456***\r\n                  PASSWORD12345\r\n                  passWORD\r\n\r\n                  PASSword12\r\n                  passWORD!!\r\n                  PASSW123RD!\r\n                  password123!\r\n\r\n                  should pass:\r\n                  passWORD123!\r\n\r\n                https://regexr.com/\r\n                https://stackoverflow.com/questions/5887678/alphanumeric-dash-and-underscore-but-no-spaces-regular-expression-check-javascr\r\n                https://www.thepolyglotdeveloper.com/2015/05/use-regex-to-test-password-strength-in-javascript/\r\n                */,\r\n              confirmPassword: Yup.string()\r\n                .required(\"Required\")\r\n                .oneOf([Yup.ref(\"password\"), null], \"Passwords do not match\"),\r\n              email: Yup.string()\r\n                .required(\"Required\")\r\n                .email(\"Must be a valid email\"),\r\n            })}\r\n            onSubmit={(fields) => {\r\n              //  alert(\"SUCCESS!! :-)\\n\\n\" + JSON.stringify(fields, null, 4));\r\n              this.createNewAccount({\r\n                username: fields.username,\r\n                password: fields.password,\r\n                email: fields.email,\r\n              });\r\n            }}\r\n          >\r\n            {(props) => (\r\n              <Form>\r\n                <label>First, choose a unique username</label>\r\n                <Field\r\n                  name=\"username\"\r\n                  type=\"text\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (props.errors.username && props.touched.username\r\n                      ? \" is-invalid\"\r\n                      : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"username\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n                <label>Enter a password (must contain min. 6 characters)</label>\r\n                <Field\r\n                  name=\"password\"\r\n                  type=\"text\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (props.errors.password && props.touched.password\r\n                      ? \" is-invalid\"\r\n                      : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"password\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n\r\n                <label>Please confirm your password</label>\r\n                <Field\r\n                  name=\"confirmPassword\"\r\n                  type=\"text\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (props.errors.confirmPassword &&\r\n                    props.touched.confirmPassword\r\n                      ? \" is-invalid\"\r\n                      : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"confirmPassword\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n                <label>Enter your email</label>\r\n                <Field\r\n                  name=\"email\"\r\n                  type=\"text\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (props.errors.email && props.touched.email\r\n                      ? \" is-invalid\"\r\n                      : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"email\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n                <button type=\"submit\">Register</button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signup;\r\n"]},"metadata":{},"sourceType":"module"}