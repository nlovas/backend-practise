{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\backend-practise\\\\frontend\\\\pages\\\\signup.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Header from \"../components/Header\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nvar Signup = /*#__PURE__*/function (_React$Component) {\n  _inherits(Signup, _React$Component);\n\n  var _super = _createSuper(Signup);\n\n  function Signup(props) {\n    _classCallCheck(this, Signup);\n\n    return _super.call(this, props); // this.state = { usernamevalue: \"\", pwvalue: \"\", emailvalue: \"\" };\n\n    /*this.usernameChange = this.usernameChange.bind(this);\r\n    this.pwChange = this.pwChange.bind(this);\r\n    this.emailChange = this.emailChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);*/\n  }\n  /* usernameChange(event) {\r\n    this.setState({ usernamevalue: event.target.value });\r\n  }\r\n    pwChange(event) {\r\n    this.setState({ pwvalue: event.target.value });\r\n  }\r\n    emailChange(event) {\r\n    this.setState({ emailvalue: event.target.value });\r\n  }\r\n    handleSubmit(event) {\r\n    alert(\"successfully submitted\" + this.state.value);\r\n    event.preventDefault();\r\n  }*/\n\n\n  _createClass(Signup, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 7\n        }\n      }, __jsx(Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }\n      }, \"Sign up\"), __jsx(Formik, {\n        initialValues: {\n          username: \"\",\n          password: \"\",\n          confirmPassword: \"\",\n          email: \"\"\n        },\n        validationSchema: Yup.object().shape({\n          username: Yup.string().required(\"Required\").min(3, \"Username must be at least 3 characters long\").max(20, \"Username is too long\").matches(/[A-Za-z0-9\\-\\_.]/, \"Username can only use letters, numbers, or special characters(-_.)\"),\n          password: Yup.string().required(\"Required\").min(6, \"Password must be at least 6 characters long\").max(20, \"Password is too long\").matches(/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*\\-\\_])/, \"Password must contain: one or more lowercase letters, uppercase letters, a number, and a symbol(!@#$%^&*-_)\"),\n\n          /*\r\n          (?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*\\-\\_])\\w+ from regexer\r\n          password\r\n          PASSWORD\r\n          123456\r\n          @@!!!@@@--@!\r\n          pass!!!!!!\r\n          password1234\r\n          PASS---WORD\r\n          123456***\r\n          PASSWORD12345\r\n          passWORD\r\n          PASSword12\r\n          passWORD!!\r\n          PASSW123RD!\r\n          password123!\r\n          should pass:\r\n          passWORD123!\r\n          pASSw@rd222\r\n                Passwords to test:\r\n              password\r\n              PASSWORD\r\n              123456\r\n              @@!!!@@@--@!\r\n                pass!!!!!!\r\n              password1234\r\n              PASS---WORD\r\n              123456***\r\n              PASSWORD12345\r\n              passWORD\r\n                PASSword12\r\n              passWORD!!\r\n              PASSW123RD!\r\n              password123!\r\n                should pass:\r\n              passWORD123!\r\n              https://regexr.com/\r\n            https://stackoverflow.com/questions/5887678/alphanumeric-dash-and-underscore-but-no-spaces-regular-expression-check-javascr\r\n            https://www.thepolyglotdeveloper.com/2015/05/use-regex-to-test-password-strength-in-javascript/\r\n            */\n          confirmPassword: Yup.string().required(\"Required\").oneOf([Yup.ref(\"password\"), null], \"Passwords do not match\"),\n          email: Yup.string().required(\"Required\").email(\"Must be a valid email\")\n        }),\n        onSubmit: function onSubmit(fields) {\n          alert(\"SUCCESS!! :-)\\n\\n\" + JSON.stringify(fields, null, 4));\n        },\n        render: function render(_ref) {\n          var errors = _ref.errors,\n              status = _ref.status,\n              touched = _ref.touched;\n          return __jsx(Form, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }\n          }, __jsx(\"label\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }\n          }, \"First, choose a unique username\"), __jsx(Field, {\n            name: \"username\",\n            type: \"text\",\n            className: \"form-control\" + (errors.username && touched.username ? \" is-invalid\" : \"\"),\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }\n          }), __jsx(ErrorMessage, {\n            name: \"username\",\n            component: \"div\",\n            className: \"invalid-feedback\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }\n          }), __jsx(\"label\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }\n          }, \"Enter a password (must contain min. 6 characters)\"), __jsx(Field, {\n            name: \"password\",\n            type: \"text\",\n            className: \"form-control\" + (errors.password && touched.password ? \" is-invalid\" : \"\"),\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }\n          }), __jsx(ErrorMessage, {\n            name: \"password\",\n            component: \"div\",\n            className: \"invalid-feedback\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 17\n            }\n          }), __jsx(\"label\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 17\n            }\n          }, \"Please confirm your password\"), __jsx(Field, {\n            name: \"confirmPassword\",\n            type: \"text\",\n            className: \"form-control\" + (errors.confirmPassword && touched.confirmPassword ? \" is-invalid\" : \"\"),\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 17\n            }\n          }), __jsx(ErrorMessage, {\n            name: \"confirmPassword\",\n            component: \"div\",\n            className: \"invalid-feedback\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }\n          }), __jsx(\"label\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 17\n            }\n          }, \"Enter your email\"), __jsx(Field, {\n            name: \"email\",\n            type: \"text\",\n            className: \"form-control\" + (errors.email && touched.email ? \" is-invalid\" : \"\"),\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }\n          }), __jsx(ErrorMessage, {\n            name: \"email\",\n            component: \"div\",\n            className: \"invalid-feedback\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 17\n            }\n          }), __jsx(\"button\", {\n            type: \"submit\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }\n          }, \"Register\"));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return Signup;\n}(React.Component);\n\nexport default Signup;","map":{"version":3,"sources":["C:/Users/User/Documents/backend-practise/frontend/pages/signup.js"],"names":["Header","Formik","Field","Form","ErrorMessage","Yup","Signup","props","username","password","confirmPassword","email","object","shape","string","required","min","max","matches","oneOf","ref","fields","alert","JSON","stringify","errors","status","touched","React","Component"],"mappings":"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","sourcesContent":["import Header from \"../components/Header\";\r\n\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nclass Signup extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // this.state = { usernamevalue: \"\", pwvalue: \"\", emailvalue: \"\" };\r\n\r\n    /*this.usernameChange = this.usernameChange.bind(this);\r\n    this.pwChange = this.pwChange.bind(this);\r\n    this.emailChange = this.emailChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);*/\r\n  }\r\n\r\n  /* usernameChange(event) {\r\n    this.setState({ usernamevalue: event.target.value });\r\n  }\r\n\r\n  pwChange(event) {\r\n    this.setState({ pwvalue: event.target.value });\r\n  }\r\n\r\n  emailChange(event) {\r\n    this.setState({ emailvalue: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    alert(\"successfully submitted\" + this.state.value);\r\n    event.preventDefault();\r\n  }*/\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div>\r\n          <div>Sign up</div>\r\n          <Formik\r\n            initialValues={{\r\n              username: \"\",\r\n              password: \"\",\r\n              confirmPassword: \"\",\r\n              email: \"\"\r\n            }}\r\n            validationSchema={Yup.object().shape({\r\n              username: Yup.string()\r\n                .required(\"Required\")\r\n                .min(3, \"Username must be at least 3 characters long\")\r\n                .max(20, \"Username is too long\")\r\n                .matches(\r\n                  /[A-Za-z0-9\\-\\_.]/,\r\n                  \"Username can only use letters, numbers, or special characters(-_.)\"\r\n                ),\r\n              password: Yup.string()\r\n                .required(\"Required\")\r\n                .min(6, \"Password must be at least 6 characters long\")\r\n                .max(20, \"Password is too long\")\r\n                .matches(\r\n                  /(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*\\-\\_])/,\r\n                  \"Password must contain: one or more lowercase letters, uppercase letters, a number, and a symbol(!@#$%^&*-_)\"\r\n                ),\r\n              /*\r\n\r\n(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*\\-\\_])\\w+ from regexer\r\n\r\npassword\r\nPASSWORD\r\n123456\r\n@@!!!@@@--@!\r\npass!!!!!!\r\npassword1234\r\nPASS---WORD\r\n123456***\r\nPASSWORD12345\r\npassWORD\r\nPASSword12\r\npassWORD!!\r\nPASSW123RD!\r\npassword123!\r\nshould pass:\r\npassWORD123!\r\npASSw@rd222\r\n\r\n                  Passwords to test:\r\n                  password\r\n                  PASSWORD\r\n                  123456\r\n                  @@!!!@@@--@!\r\n\r\n                  pass!!!!!!\r\n                  password1234\r\n                  PASS---WORD\r\n                  123456***\r\n                  PASSWORD12345\r\n                  passWORD\r\n\r\n                  PASSword12\r\n                  passWORD!!\r\n                  PASSW123RD!\r\n                  password123!\r\n\r\n                  should pass:\r\n                  passWORD123!\r\n\r\n                https://regexr.com/\r\n                https://stackoverflow.com/questions/5887678/alphanumeric-dash-and-underscore-but-no-spaces-regular-expression-check-javascr\r\n                https://www.thepolyglotdeveloper.com/2015/05/use-regex-to-test-password-strength-in-javascript/\r\n                */\r\n              confirmPassword: Yup.string()\r\n                .required(\"Required\")\r\n                .oneOf([Yup.ref(\"password\"), null], \"Passwords do not match\"),\r\n              email: Yup.string()\r\n                .required(\"Required\")\r\n                .email(\"Must be a valid email\")\r\n            })}\r\n            onSubmit={fields => {\r\n              alert(\"SUCCESS!! :-)\\n\\n\" + JSON.stringify(fields, null, 4));\r\n            }}\r\n            render={({ errors, status, touched }) => (\r\n              <Form>\r\n                <label>First, choose a unique username</label>\r\n                <Field\r\n                  name=\"username\"\r\n                  type=\"text\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (errors.username && touched.username ? \" is-invalid\" : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"username\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n                <label>Enter a password (must contain min. 6 characters)</label>\r\n                <Field\r\n                  name=\"password\"\r\n                  type=\"text\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (errors.password && touched.password ? \" is-invalid\" : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"password\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n\r\n                <label>Please confirm your password</label>\r\n                <Field\r\n                  name=\"confirmPassword\"\r\n                  type=\"text\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (errors.confirmPassword && touched.confirmPassword\r\n                      ? \" is-invalid\"\r\n                      : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"confirmPassword\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n                <label>Enter your email</label>\r\n                <Field\r\n                  name=\"email\"\r\n                  type=\"text\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (errors.email && touched.email ? \" is-invalid\" : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"email\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n                <button type=\"submit\">Register</button>\r\n              </Form>\r\n            )}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signup;\r\n"]},"metadata":{},"sourceType":"module"}