{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\backend-practise\\\\frontend\\\\pages\\\\signup.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Header from \"../components/Header\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nconst api = \"http://localhost:8080\";\n\nclass Signup extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  /*  onInputBlur(event, field) {\r\n    console.log(\"username had an input blur\", event, field);\r\n    // handleBlur(event);\r\n    //validateField(field);\r\n  }\r\n  */\n\n  /*\r\n  Create a new account using the validated information from the form\r\n  Sends a post request to our backend to create a new user in the db\r\n  */\n\n\n  createNewAccount(data) {\n    axios({\n      method: \"post\",\n      url: \"http://localhost:8080/create-user\",\n      data: {\n        username: data.username,\n        password: data.password,\n        email: data.email,\n        admin: \"false\"\n      }\n    }).then(response => {\n      console.log(response);\n    }, error => {\n      console.log(error);\n    });\n  }\n  /*\r\n  Check existence of both username and email and only return true if both are not already in use\r\n  */\n\n\n  checkUsernameAndEmail(username, email, actions) {\n    return new Promise((resolve, reject) => {\n      var p1 = this.checkUsernameExistence(username);\n      var p2 = this.checkEmailAvailable(email);\n      Promise.all([p1, p2]).then(values => {\n        console.log(values);\n        resolve(false);\n      }); //check if username is already in use\n\n      /* this.checkUsernameExistence(username)\r\n      .then((isAvailable)=>{\r\n      if (isAvailable) {\r\n      \r\n      } else{\r\n        actions.setFieldError(\r\n          \"username\",\r\n          \"This username is already in use\"\r\n        );\r\n      }\r\n      });\r\n      //check to see if email is already in use\r\n      this.checkEmailAvailable(fields.email)\r\n      .then((isAvailable) => {\r\n      if (isAvailable) {\r\n        \r\n      } else {\r\n        actions.setFieldError(\r\n          \"email\",\r\n          \"This email is already in use\"\r\n        );\r\n      }\r\n      });*/\n    });\n  }\n  /*\r\n  Calls api to see if the username has already been registered\r\n  */\n\n\n  checkUsernameExistence(username) {\n    console.log(\"formval is \", username);\n    return new Promise((resolve, reject) => {\n      /*\r\n      Async Validation using Yup, Formik, and React https://stackoverflow.com/a/57882753\r\n      Answered by Stack Overflow user 이석규 (https://stackoverflow.com/users/12051163/%ec%9d%b4%ec%84%9d%ea%b7%9c)\r\n      */\n      axios({\n        method: \"get\",\n        url: \"http://localhost:8080/user/\" + username,\n        params: {\n          username: username\n        }\n      }).then(response => {\n        console.log(response);\n\n        if (response.data === \"true\") {\n          //this username has been taken\n          resolve(true); //(false)\n        } else {\n          resolve(false); //(true)\n        }\n      }, error => {\n        console.log(error);\n      });\n    });\n  }\n  /*\r\n  calls api to see if the email submitted is already registered\r\n  */\n\n\n  checkEmailAvailable(email) {\n    return new Promise((resolve, reject) => {\n      axios({\n        method: \"get\",\n        url: \"http://localhost:8080/\" + email,\n        params: {\n          email: email\n        }\n      }).then(response => {\n        console.log(response);\n\n        if (response.data === \"true\") {\n          //this email is already in use\n          resolve(false);\n        } else {\n          resolve(true);\n        }\n      }, error => {\n        console.log(error);\n      });\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }, __jsx(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }, \"Sign up\"), __jsx(Formik, {\n      initialValues: {\n        username: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        email: \"\"\n      },\n      validationSchema: Yup.object().shape({\n        username: Yup.string().required(\"Required\").min(3, \"Username must be at least 3 characters long\").max(20, \"Username is too long\").matches(/^[A-Za-z0-9\\-\\_.]*$/, \"Username can only use letters, numbers, or special characters(-_.)\"),\n        //check to see if this username already exists\n\n        /*\r\n          NOTE: There is a known bug with Yup's .test calling every time a field is blurred\r\n          This means a TON of unneeded calls to the api\r\n          Follow the issue here https://github.com/jaredpalmer/formik/issues/512\r\n          going to try a workaround\r\n          */\n\n        /* .test(\r\n            \"checkUsernameExistence\",\r\n            \"This username is not available\",\r\n            async (value) => {\r\n              return this.checkUsernameExistence(value);\r\n            }\r\n          ),*/\n        password: Yup.string().required(\"Required\").min(6, \"Password must be at least 6 characters long\").max(20, \"Password is too long\").matches(/(?=(.*[0-9]))(?=.*[\\!@#$%^&*\\-_.])(?=.*[a-z])(?=(.*[A-Z]))(?=(.*))/, \"Password must contain: one or more lowercase letters, uppercase letters, a number, and a symbol(!@#$%^&*-_.)\")\n        /*\r\n        (?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*\\-\\_])\r\n        (?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*\\-\\_])\\w+ from regexer\r\n        password\r\n        PASSWORD\r\n        123456\r\n        @@!!!@@@--@!\r\n        pass!!!!!!\r\n        password1234\r\n        PASS---WORD\r\n        123456***\r\n        PASSWORD12345\r\n        passWORD\r\n        PASSword12\r\n        passWORD!!\r\n        PASSW123RD!\r\n        password123!\r\n        should pass:\r\n        passWORD123!\r\n        pASSw@rd222\r\n          Passwords to test:\r\n        password\r\n        PASSWORD\r\n        123456\r\n        @@!!!@@@--@!\r\n          pass!!!!!!\r\n        password1234\r\n        PASS---WORD\r\n        123456***\r\n        PASSWORD12345\r\n        passWORD\r\n          PASSword12\r\n        passWORD!!\r\n        PASSW123RD!\r\n        password123!\r\n          should pass:\r\n        passWORD123!\r\n        https://regexr.com/\r\n        https://stackoverflow.com/questions/5887678/alphanumeric-dash-and-underscore-but-no-spaces-regular-expression-check-javascr\r\n        https://www.thepolyglotdeveloper.com/2015/05/use-regex-to-test-password-strength-in-javascript/\r\n        */\n        ,\n        confirmPassword: Yup.string().required(\"Required\").oneOf([Yup.ref(\"password\"), null], \"Passwords do not match\"),\n        email: Yup.string().required(\"Required\").email(\"Must be a valid email\")\n      }),\n      onSubmit: (fields, actions) => {\n        //check to see if username and email already in use\n        this.checkUsernameAndEmail(fields.username, fields.email, actions).then(bothValid => {\n          if (bothValid) {\n            console.log(\"both were valid. creating new account\");\n            this.createNewAccount({\n              username: fields.username,\n              password: fields.password,\n              email: fields.email\n            });\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    }, props => __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 15\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }\n    }, \"First, choose a unique username\"), __jsx(Field, {\n      name: \"username\",\n      type: \"text\",\n      className: \"form-control\" + (props.errors.username && props.touched.username ? \" is-invalid\" : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }\n    }), __jsx(ErrorMessage, {\n      name: \"username\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }\n    }), __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }\n    }, \"Enter a password (must contain min. 6 characters)\"), __jsx(Field, {\n      name: \"password\",\n      type: \"text\",\n      className: \"form-control\" + (props.errors.password && props.touched.password ? \" is-invalid\" : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }\n    }), __jsx(ErrorMessage, {\n      name: \"password\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }\n    }), __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 17\n      }\n    }, \"Please confirm your password\"), __jsx(Field, {\n      name: \"confirmPassword\",\n      type: \"text\",\n      className: \"form-control\" + (props.errors.confirmPassword && props.touched.confirmPassword ? \" is-invalid\" : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }\n    }), __jsx(ErrorMessage, {\n      name: \"confirmPassword\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 17\n      }\n    }), __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 17\n      }\n    }, \"Enter your email\"), __jsx(Field, {\n      name: \"email\",\n      type: \"text\",\n      className: \"form-control\" + (props.errors.email && props.touched.email ? \" is-invalid\" : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 17\n      }\n    }), __jsx(ErrorMessage, {\n      name: \"email\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }\n    }, \"Register\")))));\n  }\n\n}\n\nexport default Signup;","map":{"version":3,"sources":["C:/Users/User/Documents/backend-practise/frontend/pages/signup.js"],"names":["Header","Formik","Field","Form","ErrorMessage","Yup","axios","api","Signup","React","Component","constructor","props","createNewAccount","data","method","url","username","password","email","admin","then","response","console","log","error","checkUsernameAndEmail","actions","Promise","resolve","reject","p1","checkUsernameExistence","p2","checkEmailAvailable","all","values","params","render","confirmPassword","object","shape","string","required","min","max","matches","oneOf","ref","fields","bothValid","errors","touched"],"mappings":"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","sourcesContent":["import Header from \"../components/Header\";\r\n\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport axios from \"axios\";\r\n\r\nconst api = \"http://localhost:8080\";\r\n\r\nclass Signup extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  /*  onInputBlur(event, field) {\r\n    console.log(\"username had an input blur\", event, field);\r\n    // handleBlur(event);\r\n    //validateField(field);\r\n  }\r\n  */\r\n\r\n  /*\r\n  Create a new account using the validated information from the form\r\n  Sends a post request to our backend to create a new user in the db\r\n  */\r\n  createNewAccount(data) {\r\n    axios({\r\n      method: \"post\",\r\n      url: \"http://localhost:8080/create-user\",\r\n      data: {\r\n        username: data.username,\r\n        password: data.password,\r\n        email: data.email,\r\n        admin: \"false\",\r\n      },\r\n    }).then(\r\n      (response) => {\r\n        console.log(response);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n  /*\r\nCheck existence of both username and email and only return true if both are not already in use\r\n*/\r\n  checkUsernameAndEmail(username, email, actions) {\r\n    return new Promise((resolve, reject) => {\r\n      var p1 = this.checkUsernameExistence(username);\r\n      var p2 = this.checkEmailAvailable(email);\r\n      Promise.all([p1, p2]).then((values) => {\r\n        console.log(values);\r\n        resolve(false);\r\n      });\r\n\r\n      //check if username is already in use\r\n      /* this.checkUsernameExistence(username)\r\n    .then((isAvailable)=>{\r\n      if (isAvailable) {\r\n      \r\n      } else{\r\n        actions.setFieldError(\r\n          \"username\",\r\n          \"This username is already in use\"\r\n        );\r\n      }\r\n    });\r\n    //check to see if email is already in use\r\n    this.checkEmailAvailable(fields.email)\r\n    .then((isAvailable) => {\r\n      if (isAvailable) {\r\n        \r\n      } else {\r\n        actions.setFieldError(\r\n          \"email\",\r\n          \"This email is already in use\"\r\n        );\r\n      }\r\n    });*/\r\n    });\r\n  }\r\n\r\n  /*\r\n  Calls api to see if the username has already been registered\r\n  */\r\n  checkUsernameExistence(username) {\r\n    console.log(\"formval is \", username);\r\n    return new Promise((resolve, reject) => {\r\n      /*\r\nAsync Validation using Yup, Formik, and React https://stackoverflow.com/a/57882753\r\nAnswered by Stack Overflow user 이석규 (https://stackoverflow.com/users/12051163/%ec%9d%b4%ec%84%9d%ea%b7%9c)\r\n*/\r\n      axios({\r\n        method: \"get\",\r\n        url: \"http://localhost:8080/user/\" + username,\r\n        params: {\r\n          username: username,\r\n        },\r\n      }).then(\r\n        (response) => {\r\n          console.log(response);\r\n          if (response.data === \"true\") {\r\n            //this username has been taken\r\n            resolve(true); //(false)\r\n          } else {\r\n            resolve(false); //(true)\r\n          }\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  /*\r\n  calls api to see if the email submitted is already registered\r\n  */\r\n  checkEmailAvailable(email) {\r\n    return new Promise((resolve, reject) => {\r\n      axios({\r\n        method: \"get\",\r\n        url: \"http://localhost:8080/\" + email,\r\n        params: {\r\n          email: email,\r\n        },\r\n      }).then(\r\n        (response) => {\r\n          console.log(response);\r\n          if (response.data === \"true\") {\r\n            //this email is already in use\r\n            resolve(false);\r\n          } else {\r\n            resolve(true);\r\n          }\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div>\r\n          <div>Sign up</div>\r\n          <Formik\r\n            initialValues={{\r\n              username: \"\",\r\n              password: \"\",\r\n              confirmPassword: \"\",\r\n              email: \"\",\r\n            }}\r\n            validationSchema={Yup.object().shape({\r\n              username: Yup.string()\r\n                .required(\"Required\")\r\n                .min(3, \"Username must be at least 3 characters long\")\r\n                .max(20, \"Username is too long\")\r\n                .matches(\r\n                  /^[A-Za-z0-9\\-\\_.]*$/,\r\n                  \"Username can only use letters, numbers, or special characters(-_.)\"\r\n                ),\r\n              //check to see if this username already exists\r\n              /*\r\n                NOTE: There is a known bug with Yup's .test calling every time a field is blurred\r\n                This means a TON of unneeded calls to the api\r\n                Follow the issue here https://github.com/jaredpalmer/formik/issues/512\r\n                going to try a workaround\r\n                */\r\n              /* .test(\r\n                  \"checkUsernameExistence\",\r\n                  \"This username is not available\",\r\n                  async (value) => {\r\n                    return this.checkUsernameExistence(value);\r\n                  }\r\n                ),*/\r\n              password: Yup.string()\r\n                .required(\"Required\")\r\n                .min(6, \"Password must be at least 6 characters long\")\r\n                .max(20, \"Password is too long\")\r\n                .matches(\r\n                  /(?=(.*[0-9]))(?=.*[\\!@#$%^&*\\-_.])(?=.*[a-z])(?=(.*[A-Z]))(?=(.*))/,\r\n                  \"Password must contain: one or more lowercase letters, uppercase letters, a number, and a symbol(!@#$%^&*-_.)\"\r\n                ) /*\r\n(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*\\-\\_])\r\n(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*\\-\\_])\\w+ from regexer\r\n\r\npassword\r\nPASSWORD\r\n123456\r\n@@!!!@@@--@!\r\npass!!!!!!\r\npassword1234\r\nPASS---WORD\r\n123456***\r\nPASSWORD12345\r\npassWORD\r\nPASSword12\r\npassWORD!!\r\nPASSW123RD!\r\npassword123!\r\nshould pass:\r\npassWORD123!\r\npASSw@rd222\r\n\r\n                  Passwords to test:\r\n                  password\r\n                  PASSWORD\r\n                  123456\r\n                  @@!!!@@@--@!\r\n\r\n                  pass!!!!!!\r\n                  password1234\r\n                  PASS---WORD\r\n                  123456***\r\n                  PASSWORD12345\r\n                  passWORD\r\n\r\n                  PASSword12\r\n                  passWORD!!\r\n                  PASSW123RD!\r\n                  password123!\r\n\r\n                  should pass:\r\n                  passWORD123!\r\n\r\n                https://regexr.com/\r\n                https://stackoverflow.com/questions/5887678/alphanumeric-dash-and-underscore-but-no-spaces-regular-expression-check-javascr\r\n                https://www.thepolyglotdeveloper.com/2015/05/use-regex-to-test-password-strength-in-javascript/\r\n                */,\r\n              confirmPassword: Yup.string()\r\n                .required(\"Required\")\r\n                .oneOf([Yup.ref(\"password\"), null], \"Passwords do not match\"),\r\n              email: Yup.string()\r\n                .required(\"Required\")\r\n                .email(\"Must be a valid email\"),\r\n            })}\r\n            onSubmit={(fields, actions) => {\r\n              //check to see if username and email already in use\r\n              this.checkUsernameAndEmail(\r\n                fields.username,\r\n                fields.email,\r\n                actions\r\n              ).then((bothValid) => {\r\n                if (bothValid) {\r\n                  console.log(\"both were valid. creating new account\");\r\n                  this.createNewAccount({\r\n                    username: fields.username,\r\n                    password: fields.password,\r\n                    email: fields.email,\r\n                  });\r\n                }\r\n              });\r\n            }}\r\n          >\r\n            {(props) => (\r\n              <Form>\r\n                <label>First, choose a unique username</label>\r\n                <Field\r\n                  name=\"username\"\r\n                  type=\"text\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (props.errors.username && props.touched.username\r\n                      ? \" is-invalid\"\r\n                      : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"username\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n                <label>Enter a password (must contain min. 6 characters)</label>\r\n                <Field\r\n                  name=\"password\"\r\n                  type=\"text\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (props.errors.password && props.touched.password\r\n                      ? \" is-invalid\"\r\n                      : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"password\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n\r\n                <label>Please confirm your password</label>\r\n                <Field\r\n                  name=\"confirmPassword\"\r\n                  type=\"text\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (props.errors.confirmPassword &&\r\n                    props.touched.confirmPassword\r\n                      ? \" is-invalid\"\r\n                      : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"confirmPassword\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n                <label>Enter your email</label>\r\n                <Field\r\n                  name=\"email\"\r\n                  type=\"text\"\r\n                  className={\r\n                    \"form-control\" +\r\n                    (props.errors.email && props.touched.email\r\n                      ? \" is-invalid\"\r\n                      : \"\")\r\n                  }\r\n                />\r\n                <ErrorMessage\r\n                  name=\"email\"\r\n                  component=\"div\"\r\n                  className=\"invalid-feedback\"\r\n                />\r\n                <button type=\"submit\">Register</button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signup;\r\n"]},"metadata":{},"sourceType":"module"}